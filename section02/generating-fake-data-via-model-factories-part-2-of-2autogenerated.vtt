WEBVTT

0
00:04.250 --> 00:07.030
Let's open seeds

1
00:07.050 --> 00:08.370
Database seeder

2
00:09.020 --> 00:12.820
And for now we don't need to call other seed

3
00:13.000 --> 00:15.780
so just remove it.

4
00:16.480 --> 00:21.160
And here let's do the same thing as we did in tinker so factory

5
00:26.280 --> 00:28.380
Pass the user class and the first parameter

6
00:34.620 --> 00:38.450
and specifies the number of data that will be created.

7
00:38.790 --> 00:45.080
in this case 3 and end with create method call

8
00:45.510 --> 00:46.990
OK.

9
00:47.250 --> 00:51.060
Now here we also need to create some fake questions right?

10
00:51.150 --> 00:55.320
If you try to do like so factory

11
00:59.470 --> 01:04.800
app question let's say ten

12
01:06.550 --> 01:09.930
So if you do like this then you are wrong.

13
01:10.120 --> 01:20.230
It will be failed because if you remember a question has to be linked to particular user as we see in

14
01:20.340 --> 01:21.110
migrations

15
01:24.930 --> 01:28.470
in this table schema.

16
01:29.280 --> 01:37.140
We have defined foreign key user id that reference id on users table.

17
01:37.710 --> 01:47.200
So in this case we need to create one or more question for each user that will be created. And we can

18
01:47.200 --> 01:51.310
do that by simply I'll remove this

19
01:55.270 --> 02:07.270
and we can simply chain in after method call with each method calling and pass in a callback or anonymous function

20
02:13.020 --> 02:17.600
So this means that each time a user created will do something else.

21
02:17.870 --> 02:22.370
What we will do here is creating some fake questions for that user.

22
02:23.340 --> 02:26.950
So I'll put this.

23
02:27.040 --> 02:34.720
So let's define an argument in these callback to represent a single user.

24
02:34.730 --> 02:37.070
Here I'll call u

25
02:39.740 --> 02:45.440
then get all questions of the user like

26
02:45.680 --> 02:53.190
so as we define user like this.

27
02:53.210 --> 02:54.500
So here

28
02:59.730 --> 03:04.110
and since we want to create more than one questions we can call

29
03:11.070 --> 03:13.440
save many

30
03:14.550 --> 03:18.900
And here we simply call another factory helper function.

31
03:20.210 --> 03:23.590
Factory pass in the question class

32
03:28.690 --> 03:39.680
and we'll generate 1 to 5 questions randomly.

33
03:39.870 --> 03:47.660
And finally we call make make method not create method

34
03:47.660 --> 03:55.190
In this case because create method will insert records to database while make method will generate objects

35
03:55.340 --> 03:59.000
and stored it in memory.

36
03:59.170 --> 04:06.800
All right before we moving on I realized that actually I made a mistake in question model so I'll open it

37
04:06.940 --> 04:07.080
up

38
04:10.700 --> 04:24.280
and here in this user method relationship this should be belongs to.  Save all changes.

39
04:26.020 --> 04:32.780
Back to our terminal. Here I'll quit from tinker

40
04:33.730 --> 04:38.050
And here we can simply type php artisan 

41
04:38.260 --> 04:47.800
migrate:fresh to drop all tables in the database and then rerun all migrations. This because we have created

42
04:47.800 --> 04:54.860
some users in tinker before and we'll make sure that we have fresh database before actually run our seed.

43
04:55.060 --> 04:59.810
And finally we add --seed to run our seed after

44
04:59.950 --> 05:01.560
database migration successfully run

45
05:09.910 --> 05:12.100
ups

46
05:12.610 --> 05:16.470
question doesn't exist let me see

47
05:20.770 --> 05:24.310
OK this should be questions

48
05:24.500 --> 05:25.870
Yes.

49
05:26.560 --> 05:30.770
So here questions save that

50
05:31.510 --> 05:38.250
and let's run migration fresh seed again

51
05:39.390 --> 05:40.470
still error

52
05:42.300 --> 05:47.790
Now what? slug doesn't have default value

53
05:53.820 --> 05:56.800
let me see question

54
06:01.660 --> 06:04.290
oh yeah I'm sorry

55
06:04.550 --> 06:07.550
this should be defined in question

56
06:07.560 --> 06:08.760
model of couse.

57
06:08.870 --> 06:16.240
So I'll cut that and paste here.

58
06:17.560 --> 06:18.090
Save

59
06:21.100 --> 06:26.290
let me run migrate fresh seed again

60
06:28.010 --> 06:31.150
Okay let me see in phpmyadmin

61
06:34.780 --> 06:36.220
here I have 3 users

62
06:46.660 --> 06:49.340
and nine questions.

63
06:49.340 --> 06:56.680
The total records in this table may be different with yours because the seed we call a random function

64
06:56.680 --> 06:59.860
so it's no problem in this case.

65
07:00.100 --> 07:03.290
Okay great.

66
07:03.340 --> 07:06.580
Let's save our work to our git repo

67
07:12.340 --> 07:15.290
git add all

68
07:17.500 --> 07:22.610
And then git commit -m

69
07:23.560 --> 07:36.920
And I'll say prepopulate users and questions table using model factories

70
07:39.390 --> 07:40.350
and seed

71
07:44.140 --> 07:54.530
here I'll push the current branch to my remote repo git push origin lesson-3

72
07:57.450 --> 08:04.710
you're probably don't have to push your all branches to remote repo. But I do this so that you can see my work.

73
08:05.050 --> 08:10.840
So just in case you face any error when you follow a particular lesson then you can compare your work

74
08:10.900 --> 08:11.980
with mine.

75
08:12.580 --> 08:15.570
Now let's switch to our master branch git

76
08:15.730 --> 08:19.450
Check out master.

77
08:20.650 --> 08:27.550
And then merge to our lesson three branch git merge lesson three

78
08:32.570 --> 08:33.080
OK.

79
08:33.190 --> 08:37.110
Now let's push our master branch to our remote repo git

80
08:37.120 --> 08:39.000
push origin

81
08:39.290 --> 08:47.810
master

82
08:48.610 --> 08:49.210
All right.

83
08:49.210 --> 08:54.700
So now that we have some records in our users and questions table. In the next lesson we'll

84
08:54.700 --> 08:59.490
be building a new feature that is display all questions from our database

85
08:59.540 --> 09:01.140
to our application's view

86
09:01.520 --> 09:03.550
OK I'll see you in the next lesson.