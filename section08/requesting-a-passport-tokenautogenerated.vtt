WEBVTT

0
00:01.800 --> 00:07.000
In a previous video we've looked at how to install 
and configure laravel passport.

1
00:07.140 --> 00:12.930
Now in this video we're going continue our lesson and look at how to make an enpoint to handle

2
00:13.020 --> 00:14.580
the access token.

3
00:14.580 --> 00:23.710
We are then going to see how to request the tokens in postman. So let's go ahead and pull open api

4
00:23.730 --> 00:25.820
dot php in our routes folder

5
00:31.560 --> 00:32.580
then inside here

6
00:35.820 --> 00:40.820
let's define a post route

7
00:41.000 --> 00:53.910
I'm gonna say token which refers to auth login controller get token

8
00:58.070 --> 00:58.600
alright

9
00:58.730 --> 01:00.650
now let's open the login controller

10
01:06.930 --> 01:12.150
then inside here let's define the get token method

11
01:17.460 --> 01:21.180
this method is going to take an argument request

12
01:27.550 --> 01:33.430
And then inside here we're going to perform the password grand tokens by hitting the oauth token

13
01:33.430 --> 01:34.480
endpoint.

14
01:34.780 --> 01:38.920
Now to hit the oauth/token endpoint and get the token back

15
01:38.920 --> 01:48.070
we need to pass in at least 5 things: grant_type, client_id, client_secret, username and password.

16
01:48.760 --> 01:54.780
Ideally we can hit a certain endpoint from the client while client brings some data to be sent.

17
01:54.940 --> 01:57.890
But for this case it's slightly different.

18
01:58.030 --> 02:04.810
Yes we can get username and password from the client or from the form to be precise so we can provide

19
02:04.810 --> 02:10.600
a username and password inputs in the client side and get those values when the user submit the form

20
02:11.080 --> 02:18.580
But we cannot do that for the other three: grant_type, client_id and client_secret because if we put those

21
02:18.700 --> 02:24.530
in the hidden inputs in local storage or something else then it will be very risky.

22
02:24.520 --> 02:28.540
It's very insecure to put sensitive information on the client.

23
02:28.540 --> 02:34.570
That's why we are gonna hit the oauth/token endpoint in here grab the user name and password that

24
02:34.600 --> 02:38.590
are being sent from the client and inject the three values in here.

25
02:38.980 --> 02:53.530
So how can we do that? Well to do that we can say Request request then we'll follow with add method then

26
02:53.560 --> 02:59.340
inside here will pass in an array which will contains the five things that I've mentioned earlier

27
03:05.990 --> 03:16.350
so the first one is grant type and the value is going to be password because we're going to perform

28
03:16.470 --> 03:17.490
password grant token

29
03:21.260 --> 03:31.070
next we'll have client_id. and it's going to take the number of the password grant go to terminal

30
03:35.470 --> 03:36.760
and here the number is 2

31
03:41.300 --> 03:44.510
next we'll have client secret

32
03:47.730 --> 03:59.210
let's also grab that from here.

33
03:59.240 --> 04:01.660
Next we'll have username and password

34
04:09.730 --> 04:21.310
and we're gonna take both of those from request username and request password

35
04:26.540 --> 04:28.620
so by through this way we added these

36
04:28.670 --> 04:32.180
five values to the request object.

37
04:32.180 --> 04:41.670
Now we can create a request to oauth/token endpoint by saying request create

38
04:44.710 --> 04:47.570
pass in the endpoint in this case

39
04:47.780 --> 04:51.190
http localhost

40
04:51.250 --> 04:57.610
colon eight thousand oauth token

41
05:00.350 --> 05:04.150
or to make it work both in development or production

42
05:04.370 --> 05:09.650
Here we can remove this http://localhost:8000

43
05:12.710 --> 05:16.460
and before that we'll add env app

44
05:20.680 --> 05:23.330
underscore URL

45
05:23.440 --> 05:28.570
And don't forget to adjust the APP_URL in our .env file

46
05:34.340 --> 05:37.060
so here I'll add the port number

47
05:45.170 --> 05:54.020
and then in the second argument we can tell that this request is going to be post requests. This create

48
05:54.030 --> 05:54.540
method

49
05:54.540 --> 05:56.010
return the request object.

50
05:56.370 --> 06:01.620
So here let's assign this into a variable let's say

51
06:01.650 --> 06:03.930
Request token

52
06:08.050 --> 06:18.280
now we can then actually hit the request by saying route dispatch and pass in the request token

53
06:25.320 --> 06:32.980
the dispatch method will return a response object so we can also assign it into another variable let's

54
06:32.990 --> 06:38.180
say response.

55
06:38.220 --> 06:40.760
And lastly we can return the response object

56
06:45.540 --> 06:51.110
and don't forget to import this route facade on the top here.

57
06:59.190 --> 07:05.640
Alright so now that we have token route that we'll hit the get token action

58
07:10.380 --> 07:16.110
the get token we'll basically hit the oauth token on the fly.

59
07:16.190 --> 07:18.650
Okay now let save all changes

60
07:21.420 --> 07:23.890
and try this out in postman.

61
07:23.890 --> 07:25.790
If you don't have that

62
07:25.800 --> 07:31.260
Just go to get postman dot com

63
07:35.180 --> 07:39.080
Hit download the app and then install on your computer.

64
07:39.130 --> 07:44.770
Once you have postman install you can open it and make a test request.

65
07:44.800 --> 07:47.670
Here we gonna hit the token endpoint.

66
07:47.880 --> 07:59.440
We're gonna need post methods and then url 
is going to be http localhost colon 8000

67
08:01.500 --> 08:07.960
API token. We also need to specify the header

68
08:10.970 --> 08:11.540
in this case

69
08:11.550 --> 08:23.450
We need to specify accept and the value is going to be application json and the most important is to

70
08:23.450 --> 08:25.250
specify the request body

71
08:28.250 --> 08:29.120
let's choose the raw

72
08:32.040 --> 08:41.720
choose application json then inside here let's specify the username and password in json format.

73
08:53.720 --> 08:54.950
Let me go to the thinker

74
09:04.850 --> 09:07.040
and I'll get the first user

75
09:19.510 --> 09:19.990
password

76
09:19.990 --> 09:25.210
It's going to be secret. Now

77
09:25.270 --> 09:26.800
If I hit the send button

78
09:32.200 --> 09:34.980
here I get internal server error

79
09:37.860 --> 09:43.550
I get error class request does not exist.

80
09:49.160 --> 09:50.680
Let me import  that at the

81
09:50.930 --> 09:51.620
top here

82
09:59.050 --> 10:02.080
save hit the send button again.

83
10:05.360 --> 10:08.680
It's look like I made typo here and find that here

84
10:13.500 --> 10:13.810
OK

85
10:13.820 --> 10:23.200
This should be request save that hit send again.

86
10:23.230 --> 10:24.250
There we go.

87
10:24.250 --> 10:26.030
Now I have access taken back.

88
10:26.170 --> 10:33.850
Awesome. Letter we'll come back here and use this access token to hit the authenticated endpoint such

89
10:33.850 --> 10:35.850
as create new question.

90
10:35.860 --> 10:38.440
Edit existing question and so on.

91
10:38.440 --> 10:44.290
Note that we'll need this stuff only in postman when we access our up in the browser

92
10:44.290 --> 10:56.370
we no longer need to do this stuff because as I said in the previous video that by specifying the create fresh

93
10:56.480 --> 11:03.710
api token laravel passport will take care of all those things for us by attaching a laravel token cookie

94
11:04.100 --> 11:09.800
to our outgoing responses which contains an encrypted JWT

95
11:10.070 --> 11:15.900
All right before we move on to the next lesson let's save this test request by

96
11:15.950 --> 11:24.680
firstly go to collection create a collection here I'm going to call laravel

97
11:24.710 --> 11:31.320
q/a restful API hit create button

98
11:35.780 --> 11:42.890
and hit this save button request name get token

99
11:49.360 --> 11:59.500
select the collection and hit save to laravel Q A request API All right see you in the next lesson.