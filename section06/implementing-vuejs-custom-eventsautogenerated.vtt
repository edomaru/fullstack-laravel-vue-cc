WEBVTT

0
00:02.320 --> 00:09.030
In this lesson we are going to make a bit change to how 
the answer removed from the UI. Currently when

1
00:09.030 --> 00:10.000
we remove an answer

2
00:14.900 --> 00:21.520
it will be removed from the UI by manipulating the DOM directly 
using jquery fade out method. That was not the vue js

3
00:21.540 --> 00:22.140
way.

4
00:22.320 --> 00:26.730
And the reason why we did that is because 
at that time we have not yet implemented

5
00:26.730 --> 00:28.750
vue js list rendering.

6
00:28.960 --> 00:34.950
Now since we have vue js list rendering implementedin our system that's why we're come back here and we need to make

7
00:34.950 --> 00:42.090
a little bit change on how the answer item removed from 
the UI by making use of vue reactive system and custom

8
00:42.120 --> 00:42.620
event

9
00:46.360 --> 00:52.370
So if we open up vue dev tools then choose answer component

10
00:55.280 --> 00:56.680
here you'll see answers array

11
01:00.040 --> 01:02.560
now if we remove one answer in this array

12
01:07.130 --> 01:10.420
you will see it also remove from the UI immediately.

13
01:10.420 --> 01:16.510
So that's a vue js reactive system. When a data value 
modified it triggers an update of the view to

14
01:16.510 --> 01:17.950
reflect that change.

15
01:18.520 --> 01:25.300
But in practice implementing this stuff in our 
code is not easy because the answers array is 

16
01:25.360 --> 01:34.710
inside parent component answers component in this case. 
While single answer as well as delete button is inside

17
01:34.710 --> 01:37.160
answer component or child component.

18
01:39.410 --> 01:42.770
So when the delete button in answer component is hit

19
01:45.560 --> 01:48.230
the item in answers array should be removed.

20
01:48.560 --> 01:52.810
But the problem is we cannot mutate the 
parent's data from the child component.

21
01:52.910 --> 01:59.290
And this is something called one way data flow. Data 
can only sent from a parent down to a child

22
01:59.660 --> 02:04.620
So what do we do when the child 
needs to send data up to the parent?

23
02:04.630 --> 02:06.310
The answer is custom events

24
02:07.490 --> 02:10.890
All right before we look at the custom events in action

25
02:10.910 --> 02:17.330
let's open up our terminal and git new branch git checkout

26
02:17.380 --> 02:20.140
-b lesson-38

27
02:25.880 --> 02:28.970
and then run web pack by saying npm run watch

28
02:37.060 --> 02:38.810
Now let's open the answer component

29
02:45.490 --> 02:46.860
then jump to destroy method

30
02:51.360 --> 02:59.630
here in then method let's remove the jquery 
fade out and utilized the custom events.

31
02:59.870 --> 03:05.620
So the custom events can be emitted from a 
child component and listened to by its parent.

32
03:05.690 --> 03:17.320
Here we use the emit instance method like this this emit 
which takes the event name as the first argument here

33
03:17.350 --> 03:19.060
I'm going to call it deleted

34
03:23.900 --> 03:31.400
and then an arbitrary number of additional arguments 
for any data to be sent along with event

35
03:31.490 --> 03:34.600
In this case we don't need to send anything just like this

36
03:40.430 --> 03:43.300
let's save this and give it a try

37
03:56.290 --> 03:57.190
reload the page

38
04:00.900 --> 04:02.320
here and vue developer tool

39
04:06.250 --> 04:17.650
let's switch to events now if I hit the delete 
button and hit yes the answer is still in place

40
04:18.160 --> 04:28.410
but here you can see deleted emit by answer on the 
right side we can see the event info name deleted

41
04:28.770 --> 04:32.980
type emit source answer and payload

42
04:33.200 --> 04:34.230
empty array

43
04:36.390 --> 04:41.260
So here the answer component emitted the deleted 
event when someone hit the delete button

44
04:41.580 --> 04:45.660
Now it's time to listen to this deleted 
event in the parent component.

45
04:46.160 --> 04:53.490
Let's switch back over to our editor. And then open answers.vue

46
05:04.220 --> 05:13.820
Now the parent companion can listen to 
deleted event by saying v-on colon deleted

47
05:19.200 --> 05:27.740
or as you're already known we can 
replace this v-on with at symbol.

48
05:27.910 --> 05:33.530
So what an answer deleted what we need to do? 
We'll need to remove it from answers array

49
05:33.940 --> 05:37.100
and decrement the answers count right?

50
05:37.310 --> 05:40.030
let's handle that with the method let's say remove

51
05:42.950 --> 05:45.650
and then pass in the index of the current answer. 

52
05:50.270 --> 05:58.010
And to capture the index here we need to make 
a bit change to the v-for directive like this.

53
06:04.990 --> 06:05.480
Next

54
06:05.500 --> 06:11.300
Let's go to the script section and then jump to methods property.

55
06:14.350 --> 06:16.170
Here let's define remove method

56
06:18.390 --> 06:19.470
and provide an argument

57
06:26.450 --> 06:29.150
here we simply remove the item from answers array

58
06:29.360 --> 06:43.950
by utilizing javascript splice method like so.

59
06:43.960 --> 06:49.640
So the first argument is the index or what position to remove item.

60
06:49.790 --> 06:53.240
And the second argument is the number of items to be removed.

61
06:53.600 --> 06:55.250
In this case will remove one item

62
06:59.750 --> 07:09.710
and then we also need to decrement the number of count property

63
07:09.800 --> 07:10.310
All right

64
07:10.310 --> 07:12.990
Let's save all changes and give another try.

65
07:17.650 --> 07:18.460
Reload the page

66
07:24.200 --> 07:24.740
here

67
07:24.770 --> 07:26.580
the question has three answers.

68
07:28.840 --> 07:32.530
And then here I'm going to hit the delete button

69
07:35.960 --> 07:36.930
and then hit yes

70
07:40.940 --> 07:44.290
here the event emitted.

71
07:44.450 --> 07:49.890
And now the answer has been removed from 
the answers list and the number of answers

72
07:49.940 --> 07:53.190
decreasing. OK

73
07:53.240 --> 08:02.300
we have successfully implemented vue js 
custom events on the answer deletion

74
08:02.370 --> 08:06.570
We do that by emitting an event from 
child component to parent component.

75
08:10.350 --> 08:11.600
And then parent component

76
08:11.620 --> 08:16.140
can listen to the event using the v-on directive in the template

77
08:16.230 --> 08:25.030
where the component is declared. So as a note that data 
can only sent from a parent down to a child through custom

78
08:25.030 --> 08:31.040
properties and a child can send data up 
to the parent through custom events

79
08:31.060 --> 08:34.890
OK that's it let's commit all changes to our git repo.

80
08:34.940 --> 08:36.080
And join me in the next lesson.