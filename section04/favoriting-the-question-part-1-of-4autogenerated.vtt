WEBVTT

0
00:01.940 --> 00:07.990
In this lesson we're going to add another feature to our 
application that allows users to choose any question

1
00:08.140 --> 00:08.700
as favorite

2
00:08.710 --> 00:09.210
question

3
00:12.360 --> 00:16.830
So a user could be favorite more than one question. 

4
00:17.490 --> 00:22.870
On the other hand a question could be 
favorited by more than one user. 

5
00:22.870 --> 00:28.300
So for this situation we're going to implement many to many relationship which in database perspective  

6
00:28.420 --> 00:35.440
requires us to provide intermediate table or pivot table 
that will store both id of the question and id  of 

7
00:35.440 --> 00:39.170
the user. For example here 

8
00:39.180 --> 00:41.130
let's visualize the users table

9
00:41.340 --> 00:49.410
let's say we have Andy and Bob and then let's also 
visualize the questions table and let's say we have 

10
00:49.410 --> 00:52.220
Question 1 and Question 2

11
00:52.370 --> 00:59.600
Now let's say Andy favorite  the question 1. In our 
database we can store it in pivot table and we can

12
00:59.600 --> 01:04.950
call it question_user which contains user ID and question ID.

13
01:05.150 --> 01:07.910
And here we can store the relationship like this.

14
01:11.430 --> 01:12.090
Now let's say Bob

15
01:12.180 --> 01:17.150
favorites Question 1 and Question 2. In our pivot table

16
01:17.340 --> 01:23.260
We can store that relationship like this.

17
01:23.270 --> 01:31.970
So here we know that Andy who has id one favorites question 1. Bob who has id 2 favorites question 1 and 

18
01:31.970 --> 01:33.100
question 2.

19
01:33.230 --> 01:40.950
And we also know that question 1 favorited by andy and 
bob and question 2 favorited by Bob.

20
01:41.150 --> 01:43.100
Now the question is how can we do that

21
01:43.100 --> 01:44.920
in our application?

22
01:45.050 --> 01:50.690
Don't worry because laravel has provide a simple 
and elegant way to do that and I'll show you that later

23
01:50.690 --> 01:52.070
in this lesson.

24
01:52.070 --> 01:56.340
All right I hope that will make sense to you at least in the debates prospective.

25
01:56.420 --> 02:02.400
Now let's implement this many to many relationship to 
build up a favorite feature in our application. 

26
02:02.840 --> 02:09.460
Let's go ahead and open our terminal and 
create new branch by saying git check out -b

27
02:09.520 --> 02:14.590
lesson-21

28
02:14.680 --> 02:20.980
Now we are in branch lesson 21 and we can start build 
out our favorite feature by firstly create new

29
02:20.980 --> 02:22.240
migration.

30
02:22.240 --> 02:29.560
So here we can say: php artisan make migration

31
02:31.120 --> 02:34.310
And then the migration name is going to be create

32
02:34.780 --> 02:40.650
and here I'll call the table as favorites instead of question

33
02:40.670 --> 02:46.120
underscore user because I think favorites 
is more descriptive than question underscore

34
02:46.120 --> 02:50.780
user

35
02:50.810 --> 02:58.960
All right let's switch to our editor and open create_favorites_table

36
03:04.070 --> 03:04.460
here

37
03:04.490 --> 03:07.910
the Increment id is not necessary so keep it or remove it

38
03:07.910 --> 03:09.260
is not a big deal.

39
03:09.260 --> 03:11.790
In my case I'll remove this column. 

40
03:14.320 --> 03:20.510
Now let's define two columns that will store user ID and 
question id as I show you in the beginning.

41
03:21.380 --> 03:26.510
So here we are going to say table unsigned integer

42
03:29.500 --> 03:30.290
user id

43
03:33.570 --> 03:40.620
and then table unsigned integer

44
03:40.800 --> 03:41.520
question id

45
03:49.220 --> 03:49.640
here

46
03:49.650 --> 03:52.710
I will not define foreign key  constrain for this table

47
03:52.970 --> 04:00.170
So it's no problem whether I use integer or unsigned 
integer for both columns but I think it's better to use 

48
04:00.350 --> 04:09.030
unsigned integer because id of the user and id of the 
question will never has negative number and here

49
04:09.160 --> 04:10.540
let's keep these time stamp

50
04:13.410 --> 04:23.100
and last;y let's prevent duplicate same user id and 
question id in the database layer by saying table unique

51
04:24.390 --> 04:37.320
and then pass an array contains user id and question id.

52
04:37.440 --> 04:48.390
So if we had user id one and then question one and 
then if we tried to insert the same records then

53
04:48.390 --> 04:51.770
it will not be inserted.

54
04:52.600 --> 04:53.770
OK that's it

55
04:53.770 --> 04:58.240
Now let's save the changes and run this migration

56
05:00.930 --> 05:03.490
php artisan migrate

57
05:07.290 --> 05:11.100
all right the create favorite table has been migrated successfully.

58
05:11.120 --> 05:14.140
Now we can go to our model and define the relationships

59
05:16.820 --> 05:25.650
let's firtly open up the user model.

60
05:26.340 --> 05:30.420
As I said before that a user could be favorites more than one question

61
05:33.780 --> 05:39.440
so here we'll call it favorites in plural

62
05:44.250 --> 05:58.190
and to represent many to many relationship in this model we need to return this belongs to many. Pass in

63
05:58.260 --> 05:59.150
the question model

64
06:03.300 --> 06:06.400
and then because we named our table as favorites

65
06:06.540 --> 06:11.700
So here we didn't specify in the second argument the table name which in this case favorites

66
06:15.290 --> 06:17.810
or let me show it to you. Here

67
06:18.100 --> 06:19.340
I'll remove the second argument

68
06:22.130 --> 06:25.400
and then I'll have the changes.

69
06:25.400 --> 06:26.750
Now let me open tinker

70
06:33.530 --> 06:41.240
and here I'll find the first user by saying `u` app user first

71
06:46.510 --> 06:49.630
and then I'll call `u`

72
06:49.710 --> 06:50.340
favorites

73
06:53.530 --> 06:56.430
as you can see here I get error.

74
06:56.500 --> 06:59.590
It's hard to read actually so let me copy there

75
07:12.600 --> 07:13.590
in here

76
07:13.710 --> 07:24.360
I'll paste in my text editor so that you can see that.

77
07:24.420 --> 07:32.640
So as you can see here eloquent will assume that the 
pivot table as question_user. The name is derived from

78
07:32.730 --> 07:36.030
the alphabetical order of the related model names

79
07:36.030 --> 07:41.610
question and user model.

80
07:41.780 --> 07:46.570
So that's why here we need to specify in a 
second argument with the table name

81
07:50.230 --> 07:55.030
I'll save the change and let me go back to thinker

82
07:55.350 --> 07:57.710
And here I need to quit to see the change

83
08:03.090 --> 08:04.720
and I'll do the same step as before

84
08:12.380 --> 08:17.250
and now there's no error here.

85
08:17.280 --> 08:24.210
Now here you can also specify in the third argument
the foreign key name of the model like this user

86
08:24.300 --> 08:34.280
id and then specify the foreign key name of the model that you are joining to in the forth argument like so.

87
08:39.280 --> 08:41.760
But since we're follow the convention

88
08:41.920 --> 08:48.880
user_id column to reference id of the users table 
and question id column to reference id of the

89
08:48.880 --> 08:50.110
questions table

90
08:50.160 --> 08:58.290
so both these can be omitted.

91
08:58.330 --> 09:07.650
So as you can see in the previous error that we got eloquent 
recognized that the foreign key name question id and

92
09:07.860 --> 09:13.550
user id. But just in case you are not following the convention

93
09:13.550 --> 09:20.240
let's say you have author_id instead of user_id then 
you need to explicitly specify in a third argument

94
09:20.300 --> 09:23.820
as author_id

95
09:27.340 --> 09:29.850
and you can do the same thing in the fourth argument.

96
09:31.300 --> 09:33.400
Now lets open the question model

97
09:39.120 --> 09:42.100
and when we can do the same thing as we did in user model

98
09:45.570 --> 09:49.190
public function favorites

99
09:58.980 --> 10:10.800
and in here we can return this belongs to many 
pass in the User class in the first argument

100
10:13.470 --> 10:15.930
and the table name in the second argument.

101
10:19.140 --> 10:29.160
You can specify the foreign key in the third and 
fourth argument like this question Id user id.

102
10:29.160 --> 10:39.020
But again since we are follow the convention they are optional.

103
10:39.020 --> 10:40.280
All right let's save all changes

104
10:49.690 --> 10:52.620
and now let's see how this many to many relationship work.