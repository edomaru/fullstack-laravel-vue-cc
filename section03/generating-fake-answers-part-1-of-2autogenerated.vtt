WEBVTT

0
00:01.750 --> 00:07.630
In the previous lesson, we have designed our `answers` table schema to store all answers in our application.

1
00:07.630 --> 00:14.020
Now instead of inserting some answers manually we will be using model factories again to pre-populate the

2
00:14.020 --> 00:19.480
answers programmatically as we did when we were building our questions feature.

3
00:19.480 --> 00:30.860
All right let's head over to our terminal and create 
new branch by saying: git checkout -b lesson-14

4
00:33.610 --> 00:41.730
now we are in new branch and we can finally start 
our work now by generating your factory here we can

5
00:41.730 --> 00:58.540
say: php artisan make:factory and then the 
factory name will be `AnswerFactory`

6
00:58.590 --> 00:59.040
All right

7
00:59.070 --> 01:01.020
let's open the answer factory

8
01:05.750 --> 01:13.490
and here in factory define let's change 
the Model to App\Answer

9
01:16.140 --> 01:17.400
and in array

10
01:18.470 --> 01:20.710
let's set the body with fake paragraphs

11
01:34.140 --> 01:40.970
It's going to be three to seven paragraphs.

12
01:41.450 --> 01:48.050
And don't forget to set `true` in the second argument 
to convert the paragraphs into a single string.

13
01:51.270 --> 01:53.590
Since the answer is created by a user

14
01:53.760 --> 01:56.490
so you let's specify user_id

15
01:59.910 --> 02:03.030
and the value will be a random user in this case.

16
02:03.030 --> 02:05.240
But how can we do that?

17
02:05.240 --> 02:14.300
Here we can say App user Pluck than Id

18
02:16.970 --> 02:18.870
random.

19
02:19.150 --> 02:20.340
I'll explain this shortly

20
02:22.330 --> 02:22.790
for now

21
02:22.800 --> 02:25.470
let's also define votes_count

22
02:29.280 --> 02:32.130
and set the value with a random number.

23
02:32.160 --> 02:42.840
Let's say zero to five votes. Here we don't need to define question_id because we will utilize eloquent relationship

24
02:43.320 --> 02:46.390
and we do that in Database Seeder.

25
02:46.560 --> 02:57.950
Now let me explain this line. Let me open tinker 
and now I'll open other terminal because I'll need more

26
02:57.950 --> 03:00.150
space.

27
03:04.080 --> 03:10.200
And here we can call App User pluck id

28
03:13.720 --> 03:18.480
here we will get a list of all user's ID in the collection.

29
03:18.520 --> 03:28.980
Now we can get one item from the collection randomly by calling random.

30
03:29.020 --> 03:30.730
So when we call this again

31
03:34.540 --> 03:35.950
we'll get different user ID

32
03:39.880 --> 03:41.110
or other approach.

33
03:41.110 --> 03:45.190
You can get the list of all users ID in array by calling

34
03:49.420 --> 03:55.950
all after that you can pass it in laravel

35
03:55.940 --> 04:05.770
array random helper function like this.

36
04:06.340 --> 04:08.660
And we get the same thing.

37
04:13.030 --> 04:13.620
OK

38
04:13.680 --> 04:24.330
Now let's call this factory in our database seeder. 
Let's open the database seeder.

39
04:24.480 --> 04:32.650
And here we already called laravel factory helper to create several users and for each user we also

40
04:32.650 --> 04:37.780
create 1 to 5 questions randomly.

41
04:37.780 --> 04:42.380
Now here we need to create several answers for every question.

42
04:42.610 --> 04:55.530
Do you have any idea? So here after save many method calling we can chain it with each method.

43
04:55.530 --> 04:57.060
pass in a closer as argument

44
05:03.170 --> 05:07.760
the closure will be has a single argument to represent a question instance.

45
05:07.760 --> 05:16.970
So let's call it `q`. Remember a question has many answers and we have defined answers  relationship

46
05:16.970 --> 05:20.370
method in our question model in the previous lesson.

47
05:20.990 --> 05:25.810
So here we can say q answers

48
05:29.140 --> 05:34.680
save many to create more than one answer.

49
05:34.930 --> 05:41.950
Inside here we can call another laravel factory help function.

50
05:42.010 --> 05:44.800
Remember this function needs two arguments.

51
05:44.980 --> 05:46.510
The first one is the model name

52
05:55.930 --> 05:58.710
and the second is how many data will be created.

53
06:04.110 --> 06:13.460
And last, to actually generate the 
model factory we need to call make.

54
06:13.500 --> 06:17.320
So let me review this code once again.

55
06:17.390 --> 06:20.840
So here we create several users

56
06:21.150 --> 06:30.940
three in this case. Here we call factory create 
to insert the users to database directly and then for

57
06:31.210 --> 06:45.530
each user it will be created 1 to 5 questions randomly and for each question it will be created 1 to 5 answers

58
06:45.530 --> 06:52.100
randomly. Here in questions and answers

59
06:52.350 --> 06:58.030
we call save many and this method needs array of object

60
06:58.290 --> 07:07.780
that's why inside it we call factory `make` because this method will not directly inserting data to database.

61
07:07.860 --> 07:12.270
Instead it will return the array contains model instances.

62
07:12.270 --> 07:15.020
OK I hope this makes sense to you.

63
07:15.240 --> 07:19.650
Now let's save all changes.

64
07:19.820 --> 07:20.550
I get error

65
07:26.110 --> 07:27.390
OK.

66
07:27.540 --> 07:29.310
Now let's switch over to our terminal

67
07:32.790 --> 07:36.590
and here we need to reset our database before we run out to seed.

68
07:36.780 --> 07:40.090
So here we can say: php artisan

69
07:40.530 --> 07:45.330
migrate:fresh --seed

70
07:54.050 --> 07:54.390
all right

71
07:54.390 --> 07:57.000
I think everything is perfectly fine.

72
07:57.270 --> 07:58.860
Now let me open phpmyadmin

73
08:04.090 --> 08:10.350
I'll good to users stable here I have three users.

74
08:10.770 --> 08:12.600
Now I'll see the questions table

75
08:19.280 --> 08:19.570
here

76
08:19.630 --> 08:21.170
I have 6 questions.

77
08:25.320 --> 08:28.320
Last I'll go to answers table

78
08:36.870 --> 08:37.140
and here

79
08:37.140 --> 08:39.460
I have 21 answers.

80
08:48.890 --> 08:57.770
Note here that the number in answers count does not reflect the actual number of related answers.

81
08:57.850 --> 08:59.160
It's only a random number

82
08:59.170 --> 09:01.180
that we defined

83
09:05.920 --> 09:07.390
in here.

84
09:07.390 --> 09:12.920
Now you may be asking how can we update the answers count with the actual number of the related answers?

85
09:13.850 --> 09:19.060
That's a good question. And it's perfectly time to me 
to show you about eloquent event.